shiny::runApp()
runApp()
runApp()
install.packages("shiny")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("leaflet")
install.packages("shinythemes")
runApp()
shiny::runApp()
install.packages("rlang")
install.packages("rlang")
shiny::runApp()
runApp()
here::here()
install.packages("here")
here::here()
runApp()
runApp()
runApp()
evictions_data <-
read.csv("C:/Users/Leonce Nshuti/Desktop/portfolio/evictions-dashboard/Evictions/data/county_court-issued_2000_2018.csv")
evictions_data
runApp()
renv::status()
renv::snapshot()
shiny::runApp()
here::here()
clear
CountyData_server <- function(id, CD, CGEO) {
moduleServer(id, function(input, output, session) {
observeEvent(input$apply_btn, {
req(input$years_inp, input$states_inp, input$var_inp, input$n_bins)
CGEO$get(
CD$get(sort(input$years_inp), sort(input$states_inp)),
input$var_inp,
input$n_bins
)
# Triggering the filter
trigger("filter")
},
ignoreInit = TRUE)
})
}
HashMapR6 <- R6::R6Class(
"HashMapR6",
public = list(
#' @field hm an `r2r::hashmap()` object.
hm = NULL,
#' @field full the full, un-transformed object
full = NULL,
#' @field path path to the full object
path = NULL,
#' @field value_fns a function that takes the full un-transformed object
#' and the key and transform it into one value.
value_fns = NULL,
#' @description
#' Create a new HashMapR6 object.
#' @return A new HashMapR6 object.
initialize = function(path) {
stopifnot("File doesn't exists" = file.exists(path))
self$path <- path
self$hm <- r2r::hashmap(on_missing_key = "throw")
},
#' @description
#' Get the value from the hashmap with provided key. If provided key doesn't
#' exist, then transform the self$full object and key into a value and store
#' in the hashmap.
#' @param key random R object.
setdefault = function(key) {
if (r2r::has_key(self$hm, key = key)) {
message("fetching")
return(self$hm[[key]])
}
message("caching")
r2r::insert(self$hm, key = key, value = self$value_fns(key = key))
return(self$hm[[key]])
}
)
)
tagList(
pickerInput(
inputId = ns("years_inp"),
label = "Years",
choices = year_choice,
selected = 2018,
options = list(
`live-search` = TRUE,
`actions-box` = TRUE,
`selected-text-format` = "count > 3"
),
multiple = TRUE
),
pickerInput(
inputId = ns("states_inp"),
label = "States",
choices = state_choice,
selected = "mainland",
options = list(
`live-search` = TRUE,
`actions-box` = TRUE,
`selected-text-format` = "count > 3"
),
multiple = TRUE
),
numericInput(
inputId = ns("n_bins"),
label = "N category of colors",
value = 10,
min = 2,
max = 50,
step = 1
),
pickerInput(
inputId = ns("var_inp"),
label = "Variable to Visualize",
choices = var_choice,
selected = var_choice[1]
),
actionBttn(
inputId = ns("apply_btn"),
label = "Apply",
style = "pill",
color = "success"
)
)
library(stringr)
library(here)
library(data.table)
library(fst)
library(dplyr)
library(leaflet)
library(tidyr)
library(sf)
# list.files(here("data"))
d <- fread(here("data", "county_court-issued_2000_2018.csv")) |>
merge(data.table(state = state.name, state_abbv = state.abb))
d[, fips := stringr::str_pad(fips_county, width = 5, side = "right", pad = "0")]
set(d, j = c("state", "fips_state", "fips_county"), value = NULL)
dd <- readxl::read_xlsx(here("data", "county_proprietary_2000_2018_codebook.xlsx"))
d
d_clean <- read_fst(
here::here("data", "temp", "2000_2020_population_by_year_counties.fst"),
as.data.table = TRUE
)
# Check if we have counties shape by year
# devtools::install_github("UrbanInstitute/urbnmapr")
# library(urbnmapr)
#
# counties_sf <- get_urbn_map("counties", sf = TRUE)
# counties_sf
library(sf)
# Download the counties geojson
# counties_geojson <-
#   geojsonio::geojson_read(
#     "https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json",
#     what = "sp"
#   )
# saveRDS(counties_geojson, here::here("data", "temp", "counties_geojson_sp.rds"))
counties_geojson <- readRDS(here::here("data", "temp", "counties_geojson_sp.rds"))
library(stringr)
library(here)
library(data.table)
library(fst)
library(dplyr)
library(leaflet)
library(tidyr)
library(sf)
# list.files(here("data"))
d <- read_fst(here::here("data", "temp", "county_court-issued_2000_2018.fst"),
as.data.table = TRUE
)
here::here("data", "temp", "county_court-issued_2000_2018.fst")
here::here(read.csv("/data/county_court-issued_2000_2018.csv"))
evictions_data <- here::here(read.csv("/data/county_court-issued_2000_2018.csv"))
evictions_data <- here::here(read.csv("data/county_court-issued_2000_2018.csv"))
shiny::runApp()
evictions_data
evictions_data <- here::here(read.csv("data/county_court-issued_2000_2018.csv")) %>%
as_tibble()
evictions_data
evictions_data <- here::here(read.csv("data/county_court-issued_2000_2018.csv"))
evictions_data
evictions_data %>% head()
evictions_data <- here::here(read.csv("data/2023-04-15-tennessee-all-available-counties-weekly.csv")) %>%
as_tibble()
evictions_data
evictions_data <- here::here(read_csv("data/tract_proprietary_valid_2000_2018.csv")) %>%
as_tibble()
evictions_data <- here::here(data.table::fread("data/tract_proprietary_valid_2000_2018.csv")) %>%
as_tibble()
install.packages('bit64')
evictions_data <- here::here(data.table::fread("data/tract_proprietary_valid_2000_2018.csv")) %>%
as_tibble()
evictions_data
install.packages("shiny.blueprint", dependencies = TRUE)
shiny::runApp()
runApp()
shiny.blueprint::runExample("showcase")
vignette("shiny.blueprint")
usethis::create_package("blueprint")
install.packages("usethis")
vignette("shiny.blueprint")
install.packages("usethis")
usethis::create_package("blueprint")
clear
